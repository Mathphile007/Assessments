# -*- coding: utf-8 -*-
"""LVADSUSR_192_IA2_kmeans.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QNKkDgnkGmWxH9l5daUNpIjJ86vN3TcT
"""

#Required Libraries
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df_mall=pd.read_csv("/content/Mall_Customers.csv")

df_mall.head(10)

df_mall.info()

df_mall.describe()

#Handling missing data and outliers
df_mall = df_mall.bfill(axis='columns')
df_mall.isnull().sum()
plt.boxplot(df_mall['Age'])
plt.boxplot(df_mall['Annual Income (k$)'])
df_mall = df_mall[df_mall['Annual Income (k$)']<130]

#Encoding
lbl = LabelEncoder()
df_mall['Gender'] = lbl.fit_transform(df_mall['Gender'])

#Model-initial
km = KMeans(n_clusters=3)
y_predicted = km.fit_predict(df_mall[['Gender','Age','Annual Income (k$)','Spending Score (1-100)']])
df_mall['cluster']=y_predicted
print(df_mall.head())
print(km.cluster_centers_)

#plotting the clusters
df1 = df_mall[df_mall.cluster==0]
df2 = df_mall[df_mall.cluster==1]
df3 = df_mall[df_mall.cluster==2]
plt.scatter(df1.Age,df1['Spending Score (1-100)'],color='green')
plt.scatter(df2.Age,df2['Spending Score (1-100)'],color='red')
plt.scatter(df3.Age,df3['Spending Score (1-100)'],color='black')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Age')
plt.ylabel('Spending Score (1-100)')
plt.legend()

#Scaling
scaler = MinMaxScaler()
scaler.fit(df_mall[['Spending Score (1-100)']])
df_mall['Spending Score (1-100)'] = scaler.transform(df_mall[['Spending Score (1-100)']])
scaler.fit(df_mall[['Age']])
df_mall['Age'] = scaler.transform(df_mall[['Age']])
print(df_mall.head())
plt.scatter(df_mall.Age,df_mall['Spending Score (1-100)'])

#Elbow method and silhoutte
X = df_mall[["Age", "Annual Income"]]
elbow = []
silhouette_scores = []
for k in range(2, 11):
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(X)
    elbow.append(kmeans.inertia_)  # Within-cluster sum of squares
    silhouette_scores.append(silhouette_score(X, kmeans.labels_))
plt.figure(figsize=(10, 5))
plt.plot(range(2, 11), elbow, marker='o', linestyle='--')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Within-cluster Sum of Squares')
plt.title('Elbow Method for Optimal k')
plt.show()

# Plotting Silhouette Score
plt.figure(figsize=(10, 5))
plt.plot(range(2, 11), silhouette_scores, marker='o', linestyle='--')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score for Optimal k')
plt.show()
optimal_k = 4

#Model with optimal k value
kmeans = KMeans(n_clusters=optimal_k)
kmeans.fit(X)

# Predict cluster labels for existing data
cluster_labels = kmeans.predict(X)

# Add cluster labels to the DataFrame
df_mall['Cluster'] = cluster_labels


plt.figure(figsize=(10, 6))
for cluster in range(optimal_k):
    cluster_data = df_mall[df_mall['Cluster'] == cluster]
    plt.scatter(cluster_data['Age'], cluster_data['Annual Income'], label=f'Cluster {cluster}')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='black', marker='*', label='Centroids')
plt.xlabel('Age')
plt.ylabel('Annual Income')
plt.title('KMeans Clustering')
plt.legend()
plt.show()
km = KMeans(n_clusters=3)
y_predicted = km.fit_predict(df_mall[['Age','Spending Score (1-100)']])
df_mall['cluster']=y_predicted
df_mall.head(25)
print(km.cluster_centers_)

sse = []
k_rng = range(1,10)
for k in k_rng:
    km = KMeans(n_clusters=k)
    km.fit(df_mall[['Age','Spending Score (1-100)']])
    sse.append(km.inertia_)
plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng,sse)


#Strategies
Focussing on social media marketting to attract specific customer segment












