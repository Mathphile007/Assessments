# -*- coding: utf-8 -*-
"""Final_Assessment_LVADSUSR_192_Q2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tRKU0AfqgKYVSDLkfDcvsYQnHAfJcs_r
"""

#Classification
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix
from sklearn.preprocessing import MinMaxScaler
import time
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.cluster import KMeans
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv("/content/penguins_classification.csv")

df.head(10)

df.info()

df.nunique()

print('Shape of the data: ', df.shape)

df.info()

#year is not useful for model
df.drop("year",axis=1,inplace=True)

numeric_cols = df.select_dtypes(include=['int','float']).columns.tolist()
categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
print(numeric_cols)
print(categorical_cols)

#Handling missing values
print('Total missing values in the data: ', df.isnull().sum().sum(), '\n\n')
print('Missing values per column \n\n',df.isnull().sum())

sns.distplot(df['bill_depth_mm'])

df['bill_depth_mm'].fillna(df['bill_depth_mm'].mean(),inplace=True)

print('Total missing values in the data: ', df.isnull().sum().sum(), '\n\n')
print('Missing values per column \n\n',df.isnull().sum())



sns.boxplot(df[numeric_cols])
#Outlier handling
def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return (data < lower_bound) | (data > upper_bound)
outliers = detect_outliers_iqr(df[numeric_cols])
#There seem to be no outliers

# Create correlation heatmap
plt.figure(figsize=(10,6))
sns.heatmap(df[numeric_cols].corr(), annot=True)
plt.title('Correlation')
plt.show()

df.duplicated().sum()
#No duplicates



from sklearn import preprocessing
le1 = preprocessing.LabelEncoder()
le1.fit(df['island'])
# transform the data
df['island']=le1.transform(df['island'])
le2 = preprocessing.LabelEncoder()
le2.fit(df['species'])
# transform the data
df['species']=le2.transform(df['species'])

df

#Data Splitting
X=df.drop(['species'],axis=1)
X

#Scaling data
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
print(X_scaled)

y=df['species']

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

df['species'].value_counts() #No imbalance

#Random forest
from sklearn.ensemble import RandomForestClassifier
model=RandomForestClassifier()
model.fit(X_train,y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import classification_report
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", round(accuracy*100,2),"%")
prec = precision_score(y_test, y_pred)
print("Precision:", round(prec*100,2),"%")
recall = recall_score(y_test, y_pred)
print("Recall:", round(recall*100,2),"%")
classification_report_str = classification_report(y_test, y_pred)
print(f"Classification Report:\n{classification_report_str}")

conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

#xgboost
import xgboost as xgb
model = xgb.XGBClassifier()
model.fit(X_train,y_train)
y_pred = model.predict(X_test)

from sklearn.metrics import classification_report
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", round(accuracy*100,2),"%")
prec = precision_score(y_test, y_pred)
print("Precision:", round(prec*100,2),"%")
recall = recall_score(y_test, y_pred)
print("Recall:", round(recall*100,2),"%")
classification_report_str = classification_report(y_test, y_pred)
print(f"Classification Report:\n{classification_report_str}")

conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

