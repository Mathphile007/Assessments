# -*- coding: utf-8 -*-
"""Python-assignment-2_TrivkramanS-LVADSUSR_192.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v1Xhf8TKDnmuVoIAv5oHAPPaPe5joi1x
"""

import pandas as pd
import numpy as np

#1
array_1=np.array([1,2,3,4,5,6])
print(np.min(array_1))
print(np.max(array_1))
print(np.sum(array_1))
print(np.mean(array_1))
print(np.std(array_1))

#Q2

import numpy as np

def normalize_attributes(data):
    mean = np.mean(data, axis=0)
    std_dev = np.std(data, axis=0)
    normalized_data = (data - mean) / std_dev
    return normalized_data

health_data = np.array([[160, 70, 30],   # height, weight, age for individual 1
                        [165, 65, 35],   # height, weight, age for individual 2
                        [170, 75, 40]])  # height, weight, age for individual 3



normalized_data = normalize_attributes(health_data)
print("Normalized data:")
print(normalized_data)

#Q3
import numpy as np

def calculate_average_last_three_subjects(scores):
    last_three_subjects_scores = scores[:, -3:]
    valid_scores = np.ma.masked_equal(last_three_subjects_scores, -1)
    average_scores = valid_scores.mean(axis=1)
    return average_scores

# Example usage:
# Assuming scores is a 2D NumPy array where each row represents a student's scores in various subjects
scores = np.array([[89, 60, 75, -1, 82],
                   [90, 75, -1, 85, 98],
                   [68, 62, 80, 62, 75]])

average_last_three_subjects = calculate_average_last_three_subjects(scores)
print("Average score in the last three subjects for each student:")
print(average_last_three_subjects)

# Q4
np.linspace(15,25,24)

#Q5
import numpy as np
daily_closing_prices = np.array([100, 102, 98, 105, 107, 110, 108, 112, 115, 118, 120])
window_size = 5
price_df=pd.DataFrame(daily_closing_prices)
print(price_df.rolling(window_size).mean())

import random

#Q6
import numpy as np
mean = [0, 0]
cov = [[1, 0.5], [0.5, 2]]
samples = np.random.multivariate_normal(mean, cov, 100)
print(samples)

#Q7
import numpy as np
properties_matrix = np.array([[1, 2, 3],
                              [4, 5, 6],
                              [7, 8, 9]])
np.linalg.det(properties_matrix)

#Q8

array_3 = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])
array_fin=array_3[array_3 > 5]
print(array_fin)

#Q9
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
        'Age': [25, 30, 35, 40, 45, 50, 55],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
        'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}
import pandas as pd
df = pd.DataFrame(data)
filtered_df = df[(df['Age'] < 45) & (df['Department'] != 'HR')]
employees_list = filtered_df[['Name', 'City']].values.tolist()
print("List of employees under 45 not in HR department:")
print(employees_list)

#Q10
import pandas as pd

data = {
    'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
    'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Sales': [70000, 50000, 30000, 40000, 60000]
}
df = pd.DataFrame(data)
department_sales = df.groupby('Department')['Sales'].sum()
department_salespeople_count = df.groupby('Department')['Salesperson'].size()
average_sales_per_salesperson = department_sales / department_salespeople_count
ranked_departments = average_sales_per_salesperson.sort_values(ascending=False).reset_index()
ranked_departments['Salespeople Count'] = department_salespeople_count.reset_index(drop=True)

print("Ranked Departments based on Average Sales per Salesperson:")
print(ranked_departments)

#Q11
import pandas as pd
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

df = pd.DataFrame(data)
fruit_df = df[df['Category'] == 'Fruit']
average_price_fruit = fruit_df['Price'].mean()
potential_promotions = fruit_df[(fruit_df['Price'] > average_price_fruit) & (~fruit_df['Promotion'])]
print("Potential candidates for future promotions:")
print(potential_promotions)

#Q12
employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
}


project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
}

employee_df=pd.DataFrame(employee_data)
project_df=pd.DataFrame(project_data)
depart_overview=pd.merge(employee_df,project_df,on="Employee",how="outer")
print(depart_overview)

#Q13
teams_df=pd.read_csv("/content/Q13_sports_team_stats.csv")
teams_df['Win Ratio']= teams_df['Wins']/teams_df['GamesPlayed']
print(teams_df.groupby("TeamID").mean()['Wins'])
print(players_df.groupby("playerID").mean()['Scores'])#average score
print(players_df.groupby("playerID").sum()['Scores'])#sum

#Data not given to find player stats so assumed players_df

#Q14
customers_df=pd.read_csv("/content/Q14_customer_purchases.csv")
customers_df['Amount-diff']=customers_df['Before']-customers_df['PurchaseAmount']
count_prog=customers_df.groupby('LoyaltyProgramSignUP').count()

#Q15
students_df=pd.read_csv("/content/Q15_student_grades.csv")
avg_score_df=students_df.groupby('Subject').mean()['Grade']
merged_df=pd.merge(students_df,avg_score_df,on="Subject",how="outer")
merged_df.columns=["StudentID","Subject","Grade","Avg_in_class"]
merged_df['Need_support']=merged_df['Grade']<merged_df["Avg_in_class"]
merged_df